from docutils.parsers.rst import Directive
from sphinx.directives.other import TocTree
from docutils.nodes import compound, Node
from sphinx import addnodes
import logging

# Used for debug logging
logger = logging.getLogger(__name__)


class FlexTreeDirective(TocTree):
    """
    Extension of the ``.. toctree::`` sphinx directive.

    Notes
    -----

    A customizable toctree directive with options to create
     links with descriptions, custom formatting, and interactive features. Ideally this feature should be developed
    in an extensible way building on top of the existing ``toctree`` directive.

    Usage
    -----

    The usage should be broadly compatible with the existing ``.. toctree::`` directive in the structures they represent.
    However, there is more flexibility in the way the tree is generated and the parameters that can be passed.

    To add descriptions below the given generated links, the following syntax can be used:

    .. code::

        .. flextree::
            :maxdepth: 2

            mypage1/
                :description: This is the description of the page.
            mypage2/
                :description: This is the description of the page.


    """

    # Directive information
    has_content: bool = True

    name: str = "flextree"

    # arguments: Any = None
    # options: Any = None
    # content: Any = None
    # lineno: Any = None
    # content_offset: Any = None
    # block_text: Any = None
    # state: Any = None
    # state_machine: Any = None
    # reporter: Any = None
    #
    # required_arguments: int = 1
    # optional_arguments: int = 0

    def run(self) -> list[Node]:
        """
        We overwrite the toctree function in order to extend it.
        """
        subnode = addnodes.toctree()
        subnode['parent'] = self.env.docname

        # (title, ref) pairs, where ref may be a document, or an external link,
        # and title may be None if the document's title is to be used
        subnode['entries'] = []
        subnode['includefiles'] = []
        subnode['maxdepth'] = self.options.get('maxdepth', -1)
        subnode['caption'] = self.options.get('caption')
        subnode['glob'] = 'glob' in self.options
        subnode['hidden'] = 'hidden' in self.options
        subnode['includehidden'] = 'includehidden' in self.options
        subnode['numbered'] = self.options.get('numbered', 0)
        subnode['titlesonly'] = 'titlesonly' in self.options
        self.set_source_info(subnode)
        wrappernode = FlexTreeNode(
            classes=['toctree-wrapper', *self.options.get('class', ())],
        )
        logger.debug("wrappernode")
        logger.debug(wrappernode)
        wrappernode.append(subnode)
        self.add_name(wrappernode)

        ret = self.parse_content(subnode)
        ret.append(wrappernode)
        return ret


class FlexTreeNode(compound):
    """
    Note that the node generated by a ``toctree`` is simply a ``compound`` class
    in ``docutils.nodes`` in the form:

    .. code::

        compound(General, Element)

    This is the type of class we want to overwrite in order to add the custom styling we are more keen on implementing.
    """

import sphinx_book_theme

def visit_flextree_node_html(self, node):
    self.body.append('<div class="flextree ">')


def depart_flextree_node_html(self, node):
    self.body.append('</div>')


def visit_flextree_node(self, node):
    pass


def depart_flextree_node(self, node):
    pass
