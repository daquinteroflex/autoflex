from docutils.parsers.rst import Directive
from sphinx.directives.other import TocTree
from docutils.nodes import paragraph, compound, reference
from sphinx import addnodes
import logging

# Used for debug logging
logger = logging.getLogger(__name__)


class FlexTreeDirective(TocTree):
    """
    Extension of the ``.. toctree::`` sphinx directive.

    Notes
    -----

    A customizable toctree directive with options to create
     links with descriptions, custom formatting, and interactive features. Ideally this feature should be developed
    in an extensible way building on top of the existing ``toctree`` directive.

    Usage
    -----

    The usage should be broadly compatible with the existing ``.. toctree::`` directive in the structures they represent.
    However, there is more flexibility in the way the tree is generated and the parameters that can be passed.

    To add descriptions below the given generated links, the following syntax can be used:

    .. code::

        .. flextree::
            :maxdepth: 2

            mypage1/
                :description: This is the description of the page.
            mypage2/
                :description: This is the description of the page.


    """

    # Directive information
    has_content: bool = True

    name: str = "flextree"

    # arguments: Any = None
    # options: Any = None
    # content: Any = None
    # lineno: Any = None
    # content_offset: Any = None
    # block_text: Any = None
    # state: Any = None
    # state_machine: Any = None
    # reporter: Any = None
    #
    # required_arguments: int = 1
    # optional_arguments: int = 0

    def run(self):
        # Initialize the final list of nodes to return
        final_nodes = []

        # Iterate through the content of the directive
        for entry in self.content:
            if '/' in entry:
                # Split the entry into the page name and its description
                parts = entry.split(':description:')
                page = parts[0].strip()
                description = parts[1].strip() if len(parts) > 1 else ""

                # Create a reference node for the page
                reference_node = reference(refuri=page, text=page)

                # Wrap it in a paragraph or list item node
                para_node = paragraph()
                para_node += reference_node

                # If a description is provided, add it below the page link
                if description:
                    description_node = paragraph(text=description)
                    para_node += description_node

                final_nodes.append(para_node)

        # Process the toctree as usual
        toctree_nodes = super().run()

        # Combine toctree nodes with our description nodes
        return toctree_nodes + final_nodes



class FlexTreeNode(compound):
    """
    Note that the node generated by a ``toctree`` is simply a ``compound`` class
    in ``docutils.nodes`` in the form:

    .. code::

        compound(General, Element)

    This is the type of class we want to overwrite in order to add the custom styling we are more keen on implementing.
    """

import sphinx_book_theme

def visit_flextree_node_html(self, node):
    self.body.append('<div class="flextree ">')


def depart_flextree_node_html(self, node):
    self.body.append('</div>')


def visit_flextree_node(self, node):
    pass


def depart_flextree_node(self, node):
    pass
