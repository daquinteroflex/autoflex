from docutils.parsers.rst import Directive
from sphinx.directives.other import TocTree
from docutils.nodes import paragraph, compound, reference
from sphinx import addnodes
import logging

# Used for debug logging
logger = logging.getLogger(__name__)


class FlexTreeDirective(TocTree):
    """
    Extension of the ``.. toctree::`` sphinx directive.

    Notes
    -----

    A customizable toctree directive with options to create
     links with descriptions, custom formatting, and interactive features. Ideally this feature should be developed
    in an extensible way building on top of the existing ``toctree`` directive.

    Usage
    -----

    The usage should be broadly compatible with the existing ``.. toctree::`` directive in the structures they represent.
    However, there is more flexibility in the way the tree is generated and the parameters that can be passed.

    To add descriptions below the given generated links, the following syntax can be used:

    .. code::

        .. flextree::
            :maxdepth: 2

            mypage1/
                :description: This is the description of the page.
            mypage2/
                :description: This is the description of the page.


    """

    # Directive information
    has_content: bool = True

    name: str = "flextree"

    # arguments: Any = None
    # options: Any = None
    # content: Any = None
    # lineno: Any = None
    # content_offset: Any = None
    # block_text: Any = None
    # state: Any = None
    # state_machine: Any = None
    # reporter: Any = None
    #
    # required_arguments: int = 1
    # optional_arguments: int = 0

    def run(self):
        # Process the toctree as usual
        toctree_nodes = super().run()

        # Initialize the final list of nodes to return
        final_nodes = []
        current_page = None
        current_metadata = {}

        for line in self.content:
            line = line.strip()

            if not line:
                continue

            if '/' in line and ':description:' not in line:
                # New toctree entry found, handle the previous one first
                if current_page:
                    final_nodes.append(self._create_node(current_page, current_metadata))

                # Start a new entry
                current_page = line
                current_metadata = {}

            elif line.startswith(':description:'):
                current_metadata['description'] = line[len(':description:'):].strip()

            elif line.startswith(':author:'):
                current_metadata['author'] = line[len(':author:'):].strip()

            elif line.startswith(':date:'):
                current_metadata['date'] = line[len(':date:'):].strip()

        # Don't forget to add the last entry
        if current_page:
            final_nodes.append(self._create_node(current_page, current_metadata))

        # Combine toctree nodes with our custom metadata nodes
        return toctree_nodes + final_nodes

    def _create_node(self, page, metadata):
        """Helper function to create a node for the given page and metadata."""
        para_node = paragraph()
        reference_node = reference(refuri=page, text=page)
        para_node += reference_node

        if 'description' in metadata:
            description_node = paragraph(text=metadata['description'])
            para_node += description_node

        if 'author' in metadata:
            author_node = paragraph(text=f"Author: {metadata['author']}")
            para_node += author_node

        if 'date' in metadata:
            date_node = paragraph(text=f"Date: {metadata['date']}")
            para_node += date_node

        return para_node


class FlexTreeNode(compound):
    """
    Note that the node generated by a ``toctree`` is simply a ``compound`` class
    in ``docutils.nodes`` in the form:

    .. code::

        compound(General, Element)

    This is the type of class we want to overwrite in order to add the custom styling we are more keen on implementing.
    """

import sphinx_book_theme

def visit_flextree_node_html(self, node):
    self.body.append('<div class="flextree ">')


def depart_flextree_node_html(self, node):
    self.body.append('</div>')


def visit_flextree_node(self, node):
    pass


def depart_flextree_node(self, node):
    pass
